generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(cuid())
  email    String   @unique
  name     String?
  password String?
  role     UserRole @default(STUDENT)
  createdAt DateTime @default(now())

  accounts         Account[]
  sessions         Session[]
  enrollments      Enrollment[]
  instructedCourses Course[] @relation("CourseInstructor")
  brandingSettings BrandingSetting[]
  banners          HomepageBanner[]

  @@map("users")
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Course {
  id          String  @id @default(cuid())
  title       String
  description String?
  thumbnail   String?
  price       Float?
  isPublished Boolean @default(false)
  instructorId String
  instructor   User    @relation("CourseInstructor", fields: [instructorId], references: [id])
  enrollments  Enrollment[]
  createdAt    DateTime @default(now())

  @@map("courses")
}

model Enrollment {
  id        String @id @default(cuid())
  studentId String
  student   User   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  courseId  String
  course    Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress  Float  @default(0)

  @@unique([studentId, courseId])
  @@map("enrollments")
}

model BrandingSetting {
  id           String  @id @default(cuid())
  logoUrl      String?
  primaryColor String  @default("#3b82f6")
  siteName     String?
  isActive     Boolean @default(true)
  createdBy    String?
  creator      User?   @relation(fields: [createdBy], references: [id])
  createdAt    DateTime @default(now())

  @@map("branding_settings")
}

model HomepageBanner {
  id       String  @id @default(cuid())
  title    String
  subtitle String?
  imageUrl String?
  isVisible Boolean @default(true)
  order    Int     @default(0)
  createdBy String?
  creator   User?   @relation(fields: [createdBy], references: [id])

  @@map("homepage_banners")
}
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String               @id @default(cuid())
  email              String               @unique
  name               String?
  password           String?
  role               UserRole             @default(STUDENT)
  createdAt          DateTime             @default(now())
  accounts           Account[]
  brandingSettings   BrandingSetting[]
  instructedCourses  Course[]             @relation("CourseInstructor")
  enrollments        Enrollment[]
  banners            HomepageBanner[]
  landingPageContent LandingPageContent[]
  lessonProgress     LessonProgress[]
  payments           Payment[]
  sessions           Session[]
  subscriptions      Subscription[]
  transactions       Transaction[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Course {
  id           String       @id @default(cuid())
  title        String
  description  String?
  thumbnail    String?
  price        Float?
  isPublished  Boolean      @default(false)
  instructorId String
  createdAt    DateTime     @default(now())
  instructor   User         @relation("CourseInstructor", fields: [instructorId], references: [id])
  enrollments  Enrollment[]
  modules      Module[]
  payments     Payment[]

  @@map("courses")
}

model Module {
  id          String   @id @default(cuid())
  title       String
  description String?
  order       Int
  courseId    String
  createdAt   DateTime @default(now())
  lessons     Lesson[]
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("modules")
}

model Lesson {
  id          String           @id @default(cuid())
  title       String
  description String?
  content     String?
  videoUrl    String?
  duration    Int?
  order       Int
  moduleId    String
  createdAt   DateTime         @default(now())
  progress    LessonProgress[]
  module      Module           @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@map("lessons")
}

model LessonProgress {
  id          String    @id @default(cuid())
  studentId   String
  lessonId    String
  completed   Boolean   @default(false)
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  student     User      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  lesson      Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([studentId, lessonId])
  @@map("lesson_progress")
}

model Enrollment {
  id        String   @id @default(cuid())
  studentId String
  courseId  String
  progress  Float    @default(0)
  createdAt DateTime @default(now())
  student   User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([studentId, courseId])
  @@map("enrollments")
}

model BrandingSetting {
  id                 String    @id @default(cuid())
  logoUrl            String?
  logoText           String?   @default("The Academy")
  logoType           LogoType  @default(text)
  primaryColor       String    @default("#3b82f6")
  secondaryColor     String    @default("#1e40af")
  siteName           String?   @default("The Academy")
  siteDescription    String?   @default("Learn anything, anywhere, anytime")
  fontFamily         String    @default("Inter")
  faviconUrl         String?
  heroBackgroundUrl  String?
  isActive           Boolean   @default(true)
  createdBy          String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now()) @updatedAt
  creator            User?     @relation(fields: [createdBy], references: [id])

  @@map("branding_settings")
}

model HomepageBanner {
  id        String  @id @default(cuid())
  title     String
  subtitle  String?
  imageUrl  String?
  isVisible Boolean @default(true)
  order     Int     @default(0)
  createdBy String?
  creator   User?   @relation(fields: [createdBy], references: [id])

  @@map("homepage_banners")
}

model Payment {
  id              String        @id @default(cuid())
  stripeSessionId String?       @unique
  stripePaymentId String?       @unique
  amount          Float
  currency        String        @default("usd")
  status          PaymentStatus @default(PENDING)
  paymentMethod   String?
  userId          String
  courseId        String
  metadata        Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  course          Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  transactions    Transaction[]

  @@map("payments")
}

model Subscription {
  id                   String             @id @default(cuid())
  stripeSubscriptionId String?            @unique
  status               SubscriptionStatus @default(ACTIVE)
  plan                 SubscriptionPlan
  amount               Float
  currency             String             @default("usd")
  interval             String
  startDate            DateTime
  endDate              DateTime?
  canceledAt           DateTime?
  userId               String
  metadata             Json?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Transaction {
  id          String            @id @default(cuid())
  type        TransactionType
  amount      Float
  currency    String            @default("usd")
  status      TransactionStatus @default(PENDING)
  description String?
  userId      String?
  paymentId   String?
  metadata    Json?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  user        User?             @relation(fields: [userId], references: [id])
  payment     Payment?          @relation(fields: [paymentId], references: [id])

  @@map("transactions")
}

model LandingPageContent {
  id                String   @id @default(cuid())
  heroTitle         String   @default("Build Your Learning Empire")
  heroSubtitle      String   @default("Complete Learning Management System with no-code customization, advanced analytics, and seamless content delivery.")
  heroBadgeText     String   @default("ðŸš€ Next-Generation Learning Platform")
  heroCtaPrimary    String   @default("Explore Courses")
  heroCtaSecondary  String   @default("Start Learning")
  studentsCount     String   @default("1000+")
  coursesCount      String   @default("50+")
  instructorsCount  String   @default("25+")
  completionRate    String   @default("95%")
  featuresTitle     String   @default("Everything You Need to Succeed")
  featuresSubtitle  String   @default("From course creation to student management, we provide all the tools you need to build and scale your educational platform.")
  demoTitle         String   @default("Try The Academy Today")
  demoSubtitle      String   @default("Experience the full power of our learning management system with these demo accounts.")
  footerDescription String   @default("Empowering educators and learners with cutting-edge technology. Build, customize, and scale your learning platform with ease.")
  isActive          Boolean  @default(false)
  createdBy         String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  creator           User     @relation(fields: [createdBy], references: [id])

  @@map("landing_page_content")
}

model LandingPageFeature {
  id          String   @id @default(cuid())
  title       String
  description String
  icon        String
  color       String   @default("blue")
  features    String
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  contentId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("landing_page_features")
}

enum LogoType {
  upload
  text
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
  INCOMPLETE
}

enum SubscriptionPlan {
  BASIC
  PREMIUM
  ENTERPRISE
}

enum TransactionType {
  COURSE_PURCHASE
  SUBSCRIPTION_PAYMENT
  REFUND
  COMMISSION
  WITHDRAWAL
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELED
}
